#line 2 "Gmsh.yy.cpp"

#line 4 "Gmsh.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer gmsh_yy_create_buffer
#define yy_delete_buffer gmsh_yy_delete_buffer
#define yy_flex_debug gmsh_yy_flex_debug
#define yy_init_buffer gmsh_yy_init_buffer
#define yy_flush_buffer gmsh_yy_flush_buffer
#define yy_load_buffer_state gmsh_yy_load_buffer_state
#define yy_switch_to_buffer gmsh_yy_switch_to_buffer
#define yyin gmsh_yyin
#define yyleng gmsh_yyleng
#define yylex gmsh_yylex
#define yylineno gmsh_yylineno
#define yyout gmsh_yyout
#define yyrestart gmsh_yyrestart
#define yytext gmsh_yytext
#define yywrap gmsh_yywrap
#define yyalloc gmsh_yyalloc
#define yyrealloc gmsh_yyrealloc
#define yyfree gmsh_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE gmsh_yyrestart(gmsh_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t gmsh_yyleng;

extern FILE *gmsh_yyin, *gmsh_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gmsh_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up gmsh_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via gmsh_yyrestart()), so that the user can continue scanning by
	 * just pointing gmsh_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when gmsh_yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t gmsh_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow gmsh_yywrap()'s to do buffer switches
 * instead of setting up a fresh gmsh_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void gmsh_yyrestart (FILE *input_file  );
void gmsh_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE gmsh_yy_create_buffer (FILE *file,int size  );
void gmsh_yy_delete_buffer (YY_BUFFER_STATE b  );
void gmsh_yy_flush_buffer (YY_BUFFER_STATE b  );
void gmsh_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void gmsh_yypop_buffer_state (void );

static void gmsh_yyensure_buffer_stack (void );
static void gmsh_yy_load_buffer_state (void );
static void gmsh_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER gmsh_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE gmsh_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE gmsh_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE gmsh_yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *gmsh_yyalloc (yy_size_t  );
void *gmsh_yyrealloc (void *,yy_size_t  );
void gmsh_yyfree (void *  );

#define yy_new_buffer gmsh_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        gmsh_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        gmsh_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *gmsh_yyin = (FILE *) 0, *gmsh_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int gmsh_yylineno;

int gmsh_yylineno = 1;

extern char *gmsh_yytext;
#define yytext_ptr gmsh_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up gmsh_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	gmsh_yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 213
#define YY_END_OF_BUFFER 214
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1074] =
    {   0,
        0,    0,  214,  212,    1,    1,  212,    5,  212,    6,
      212,  212,  212,  212,  212,  207,   21,    2,  212,   16,
      212,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  212,   28,   24,   19,   25,   17,
       26,   18,    0,  209,    3,    4,   20,  208,  207,    0,
       29,   27,   30,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  115,  114,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  141,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  189,  190,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,   23,   22,    0,  208,
        0,    0,  210,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,   56,   67,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,   79,  211,  211,  211,  211,  211,  211,  211,
      211,   99,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  122,  211,
      211,  211,  211,  211,  211,  133,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  177,
      211,  211,  211,  169,  211,  211,  211,  211,  211,  175,
      211,  211,  211,  211,  198,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,    0,  209,    0,    0,  208,
      211,  211,   33,  211,  211,  211,  211,  211,  211,   39,

       41,  211,  211,  211,  211,   64,  211,   49,  211,  211,
      211,  211,  211,  211,  211,  211,  211,   55,  211,  211,
      211,  211,  211,  211,  211,   77,  211,   82,  211,  211,
      211,  211,  211,   90,  211,   92,  211,  211,   94,  211,
      211,   98,  211,  211,  211,  211,  211,  211,  211,  110,
      111,  211,  211,  211,  211,  211,  211,  211,  211,  120,
      121,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  158,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  186,  170,  211,

      211,  211,  211,  168,  211,  211,  211,  211,  211,  211,
      211,  211,  193,  197,  211,  211,  211,  211,  211,  211,
      211,  211,  211,   10,   15,    9,    8,  211,   12,   14,
        0,  208,   31,  211,  211,  211,   37,  211,  211,  211,
       43,  211,   45,  211,  211,  211,  211,  211,  211,  211,
       59,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,   87,   89,  211,  211,
      211,   93,  211,  211,   97,  211,  211,  211,  211,  211,
      211,  211,  211,  113,  211,  211,  118,  211,  211,  211,
      123,  211,  211,  211,  126,  211,  211,  211,  211,  211,

      135,  211,  138,  211,  211,  211,  142,  211,  143,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  156,
      157,  211,  211,  211,  211,  211,  211,  211,  211,  173,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  199,  211,  211,  211,  211,  205,  211,
       11,  211,   13,  211,  211,   35,  211,   36,   40,   42,
      211,   46,  211,  211,  211,   50,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,   73,   75,
      211,  211,  211,   83,   86,  211,   91,  211,  211,  211,
      211,  211,  211,  101,  211,  211,  211,  211,  211,  211,

      211,  124,  119,  211,  211,  211,  211,  131,  211,  128,
      211,  211,  211,  211,  211,  211,  147,  211,  146,  211,
      211,  211,  211,  211,  161,  211,  155,  211,  211,  211,
      211,  211,  211,  171,  172,  211,  179,  211,  184,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  206,    7,  211,  211,  211,   44,
       47,  211,  211,  211,  211,  211,  211,   54,   58,  211,
      211,  211,  211,  211,  211,  211,  211,  211,   76,   81,
      211,  211,  211,   84,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  162,  211,  211,  211,
      211,  211,  211,  178,  211,  183,  211,  211,  211,  211,
      174,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
       61,  211,  211,  211,  211,  211,  211,  211,  211,   80,
       85,  211,  211,  211,  100,  211,  211,  211,  211,  211,
      104,  211,  112,  211,  211,  125,  211,  129,  130,  211,
      211,  134,  211,  211,  211,  139,  140,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  164,  211,  211,  211,  211,  211,  187,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,   34,
      211,  211,  211,  211,   52,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,   88,  211,  211,  211,  211,
      211,  103,  102,  211,  211,  116,  203,  211,  211,  211,
      137,  211,  211,  211,  211,  211,  211,  211,  152,  154,
      211,  211,  211,  211,  165,  211,  166,  185,  181,  211,
      211,  211,  188,  191,  211,  211,  211,  211,  196,  211,
      202,  211,  211,  211,   63,  211,   53,   60,  211,  211,
      211,   69,  211,  211,  211,  211,   95,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  144,  211,
      211,  150,  211,  211,  211,  159,  211,  211,   78,  211,
      211,  180,  211,  211,  211,  211,  211,  211,  211,  211,
       48,  211,   62,   51,  211,  211,  211,  211,  211,   74,
      211,  211,  211,  211,  211,  211,  211,  204,  211,  211,
      211,  145,  211,  211,  151,  211,  211,  211,  211,  182,
      211,  211,  200,  211,  194,  211,   32,  211,  211,  211,
      211,  211,   71,   72,  211,  211,  211,  211,  211,  211,
      211,  211,  132,  136,  211,  211,  211,  160,  211,  167,
      176,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  127,  211,  211,  211,
      211,  211,  195,  211,  211,   57,   65,  211,   70,  211,
      211,  211,  211,  105,  211,  211,  211,  211,  153,  163,
      192,  211,  211,  211,  211,   96,  211,  211,  211,  211,
      211,  148,  211,  211,   38,  211,   68,  211,  211,  211,
      211,  211,  211,  201,  211,  211,  211,  211,  211,  211,
      149,  211,  106,  107,  108,  109,  211,  211,  211,  211,
      117,   66,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    6,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   46,   46,
        1,    1,    1,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   46,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,   73,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1075] =
    {   0,
        0,    0, 1206, 1207, 1207, 1207, 1184, 1207, 1198, 1207,
     1182,   65,   66,   64,   76,   78, 1207, 1207, 1181, 1180,
     1179,   49,   49,   56,   69,   64,   79,   84,   83,   96,
        0, 1139,   99,  110,  111,   81,  109, 1131,  120,  173,
      160,  117, 1136, 1144, 1122, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1183,  179, 1207, 1207, 1207,  186,  203,  232,
     1207, 1207, 1207,    0,  119, 1132, 1144, 1138, 1134, 1139,
     1132, 1139, 1124,   37, 1118,   84, 1128, 1135, 1118,  195,
     1114, 1128, 1115,  132,  125, 1130,  139, 1126, 1112, 1125,
      149, 1125,  206, 1112, 1111, 1107, 1110, 1128, 1102, 1102,

     1115,   24, 1103, 1122,    0, 1097, 1101, 1090,  106,  162,
      183, 1129, 1109,  200, 1107, 1116, 1097, 1086, 1090, 1101,
     1101, 1087, 1086, 1078,    0,  159,  205, 1092, 1099, 1086,
      217,   86, 1087, 1108, 1095, 1076, 1080, 1080, 1078,  213,
     1074, 1073, 1072,  150,    0,    0, 1100, 1074,  204,  221,
     1085, 1081, 1069, 1074, 1071, 1059, 1207, 1207,  279,  284,
      293,  265,  299, 1063, 1065, 1060, 1062, 1067, 1074,  279,
     1061, 1060, 1061, 1052, 1061, 1056, 1057, 1055, 1055, 1048,
     1061,  182, 1049,   67, 1045, 1037, 1052,    0, 1058, 1041,
     1048, 1051, 1050, 1053, 1064, 1030, 1042, 1045,  291, 1035,

     1037,  225,    0, 1030, 1028, 1034, 1039, 1039, 1049, 1027,
     1036,    0, 1036, 1055,  290, 1029, 1031, 1030, 1020, 1019,
     1052, 1026, 1011, 1024, 1021, 1022, 1021, 1006, 1057, 1018,
     1022, 1004, 1006, 1011,  998,    0, 1012, 1028, 1013, 1003,
     1008, 1011, 1002,  992,  996, 1001,  994, 1005,  992, 1000,
      999,  257,  993,  987,  980,  994,  997,  984,  991,    0,
      984,  302,  972,  985,  978,  986,  981,  980,  969,  304,
      981,  974,  982, 1004,  975,  963,  962,  979,  978,  965,
      972,  971,  962,  954,  297,  353,  358,  367,  372,  377,
      954,  961,    0,  952,  957,  951,  954,  958,  965,    0,

      997,  955,  954,  957,  957,    0,  940,    0,  958,  947,
      940,  944,  938,  945,  267,  949,  962,    0,  932,  945,
      936,  935,  928,  927,  944,    0,  929,  959,  928,  935,
      923,  930,  919,    0,  917,    0,  932,  955,    0,  929,
      916,    0,  913,  931,  917,  909,  909,  926,  946,    0,
        0,  914,  905,  930,  905,  903,  903,  900,  907,    0,
        0,  951,  899,  305,  901,  897,  937,  901,  916,  896,
      891,  907,  890,  894,  891,  895,  898,  893,  882,  883,
      880,  220,    0,  886,  880,  883,  892,  877,  876,  873,
      887,  886,  884,  880,  867,  885,  866,    0,    0,  865,

      866,  273,  869,    0,  282,  872,  863,  874,  865,  876,
      871,  887,    0,    0,  887,  897,  848,  860,  852,  863,
      851,  860,  854,    0,    0,  854,    0,  859,  852,    0,
      382,  387,    0,  842,  873,  855,  861,  840,  844,  843,
        0,  842,    0,  837,  844,  841,  848,  845,  844,  834,
      852,  833,  840,  824,  834,  827,  836,  827,  834,  833,
      832,  831,  823,  283,  828,  816,    0,    0,  828,  813,
      826,    0,  806,  817,    0,  818,  316,  805,  813,  807,
      812,  799,  807,    0,  829,  801,    0,  800,  809,  798,
        0,  837,  813,  804,    0,  788,  800,  796,  795,  804,

        0,  805,    0,  801,  801,  801,    0,  790,    0,  808,
      795,  783,  797,  780,  792,  795,  782,  776,  788,    0,
        0,  805,  790,  778,  772,  771,  779,  781,  780,    0,
      765,  764,  768,  766,  767,  774,  294,  771,  774,  757,
      761,  769,  754,    0,  784,  300,  762,  792,    0,  764,
        0,  761,    0,  748,  761,    0,  756,    0,    0,  796,
      758,    0,  749,  750,  741,    0,  746,  747,  756,  751,
      732,  741,  740,  733,  756,  731,  380,  732,    0,    0,
      743,  354,  738,    0,    0,  737,    0,  740,  735,  742,
      728,  384,  765,    0,  738,  730,  718,  732,  729,  745,

      729,    0,    0,  728,  731,  718,  705,    0,  722,    0,
      734,  722,  385,  707,  716,  723,    0,  708,    0,  713,
      375,  712,  732,  700,    0,  713,    0,  716,  703,  713,
      695,  704,  707,    0,    0,  705,    0,  701,    0,  705,
      702,  706,  695,  710,  699,  686,  698,  680,  681,  694,
      372,  697,  684,  695,    0,    0,  690,  676,  674,    0,
        0,  685,  698,  685,  686,  674,  685,    0,    0,  682,
      684,  675,  669,  703,  667,  660,  660,  677,    0,    0,
      659,  673,  674,    0,  656,  654,  659,  686,  681,  674,
      663,  654,  661,  662,  640,  676,  659,  642,   20,   39,

       54,  108,  132,  175,  201,  206,  220,  255,  265,  280,
      391,  309,  303,  296,  326,  327,    0,  347,  359,  366,
      363,  360,  358,    0,  373,    0,  368,  360,  381,  369,
        0,  363,  384,  385,  374,  381,  374,  383,  378,  393,
      381,  409,  393,  394,  426,  391,  389,  402,  401,  399,
        0,  392,  398,  398,  405,  402,  404,  400,  399,    0,
        0,  406,  401,  412,    0,  432,  433,  446,  408,  419,
        0,  407,    0,  452,  410,    0,  425,    0,    0,  414,
      415,    0,  414,  421,  426,    0,    0,  431,  433,  436,
      425,  427,  422,  437,  438,  426,  457,  427,  442,  431,

      430,  443,    0,  446,  429,  444,  451,  466,    0,  445,
      446,  449,  445,  459,  452,  457,  485,  459,  464,    0,
      476,  453,  456,  460,    0,  446,  466,  467,  460,  460,
      458,  458,  475,  469,  474,    0,  462,  460,  489,  490,
      501,    0,  488,  467,  492,    0,  504,  480,  481,  482,
        0,  489,  476,  490,  484,  507,  490,  493,    0,    0,
      491,  495,  514,  498,    0,  494,    0,    0,    0,  483,
      500,  505,    0,    0,  505,  491,  505,  491,    0,  497,
        0,  493,  498,  491,    0,  497,    0,    0,  498,  499,
      507,  514,  502,  517,  510,  520,    0,  520,  526,  527,

      528,  528,  529,  547,  519,  514,  521,  521,    0,  531,
      540,    0,  533,  528,  523,    0,  523,  541,    0,  529,
      539,    0,  533,  526,  523,  553,  544,  537,  543,  533,
        0,  534,    0,    0,  540,  552,  555,  540,  551,    0,
      568,  563,  565,  566,  553,  563,  576,    0,  559,  561,
      556,    0,  565,  549,    0,  572,  566,  551,  563,    0,
      572,  559,    0,  562,    0,  562,    0,  572,  573,  576,
      565,  572,    0,    0,  585,  607,  608,  609,  570,  580,
      603,  581,    0,    0,  577,  598,  585,    0,  592,    0,
        0,  593,  590,  581,  587,  599,  579,  590,  586,  587,

      614,  615,  616,  605,  606,  612,    0,  594,  609,  597,
      599,  599,    0,  617,  607,    0,  632,  605,    0,  615,
      630,  631,  632,    0,  638,  634,  611,  613,    0,    0,
        0,  618,  614,  619,  610,    0,  651,  652,  653,  637,
      661,    0,  621,  622,    0,  659,    0,  653,  654,  655,
      634,  664,  630,    0,  635,  661,  662,  663,  648,  674,
        0,  644,    0,    0,    0,    0,  668,  652,  678,  641,
        0,    0, 1207,  705
    } ;

static yyconst flex_int16_t yy_def[1075] =
    {   0,
     1073,    1, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1073, 1073, 1073, 1073, 1073,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1073, 1073, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074,    0, 1073
    } ;

static yyconst flex_int16_t yy_nxt[1281] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   44,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   45,   49,   53,   51,   54,   54,   54,   54,
       54,  218,  219,   55,  777,   50,   52,   56,   58,   73,
       59,   59,   59,   59,   59,  778,   57,   65,   66,   67,

       74,   68,  174,   76,   60,  779,   69,   77,  175,   75,
       78,   79,   70,   71,   72,  314,   80,   81,   98,   82,
       84,   87,   83,   88,   85,  116,   92,   89,  315,   60,
       90,  104,   86,   91,   93,   99,   94,   95,  101,   96,
      120,  177,  100,  102,  121,   97,  108,  112,  105,  178,
      109,  257,  258,  103,  110,  106,  122,  113,  117,  111,
      123,  114,  118,  124,  125,  225,  126,  130,  780,  127,
      115,  131,  128,  226,  145,  146,  152,  119,  153,  164,
      132,  154,  194,  165,  191,  192,  133,  134,  195,  193,
      147,   54,   54,   54,   54,   54,  197,  781,  160,  160,

      160,  160,  160,  198,  202,  159,  245,  148,  272,  273,
      203,  149,  161,   58,  204,   59,   59,   59,   59,   59,
      150,  227,  135,  151,  136,  246,  228,  137,  138,   60,
      159,  139,  782,  311,  140,  141,  229,  161,  142,  143,
      162,  162,  312,  144,  163,  163,  163,  163,  163,  182,
      783,  230,  183,  184,   60,  185,  186,  206,  233,  187,
      247,  512,  248,  207,  234,  208,  252,  266,  276,  253,
      267,  278,  784,  277,  254,  209,  268,  163,  163,  163,
      163,  163,  255,  785,  256,  512,  279,  286,  286,  333,
      334,  287,  287,  287,  287,  287,  160,  160,  160,  160,

      160,  289,  289,  297,  786,  290,  290,  290,  290,  290,
      288,  163,  163,  163,  163,  163,  345,  384,  329,  298,
      299,  330,  787,  385,  453,  346,  394,  454,  405,  532,
      347,  406,  529,  348,  788,  288,  533,  395,  530,  396,
      534,  407,  397,  408,  493,  494,  424,  582,  583,  425,
      592,  642,  651,  593,  426,  643,  793,  652,  427,  409,
      428,  429,  794,  795,  430,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  431,  431,  796,  797,  432,
      432,  432,  432,  432,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  675,  680,  688,  705,  712,  681,
      737,  798,  799,  789,  689,  676,  790,  800,  801,  802,
      677,  803,  804,  805,  706,  806,  791,  738,  807,  808,
      713,  792,  712,  809,  737,  810,  811,  812,  789,  813,
      814,  790,  815,  816,  817,  818,  819,  820,  821,  822,
      791,  823,  824,  825,  826,  792,  827,  828,  829,  830,
      831,  832,  833,  834,  835,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  847,  848,  849,  850,
      851,  852,  853,  854,  855,  856,  857,  858,  859,  860,
      861,  862,  863,  864,  865,  866,  867,  868,  869,  870,

      871,  872,  873,  874,  875,  876,  877,  878,  879,  880,
      881,  882,  883,  884,  885,  886,  887,  888,  889,  890,
      891,  892,  893,  894,  895,  896,  897,  898,  899,  900,
      901,  902,  903,  904,  905,  906,  907,  908,  909,  910,
      911,  912,  913,  914,  915,  916,  917,  918,  919,  920,
      921,  922,  923,  924,  925,  926,  927,  928,  929,  930,
      931,  932,  933,  934,  935,  936,  913,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  965,  966,  967,  968,  969,

      970,  971,  972,  973,  974,  975,  976,  953,  977,  978,
      979,  980,  981,  982,  983,  984,  985,  986,  964,  987,
      988,  989,  990,  991,  992,  993,  994,  995,  996,  997,
      998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
     1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1009, 1033, 1034, 1035, 1036,
     1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,

     1067, 1068, 1069, 1070, 1071, 1072,   64,  776,  775,  774,
      773,  772,  771,  770,  769,  768,  767,  766,  765,  764,
      763,  762,  761,  760,  759,  758,  757,  756,  755,  754,
      753,  752,  751,  750,  749,  748,  747,  746,  745,  744,
      743,  742,  741,  740,  739,  736,  735,  734,  733,  732,
      731,  730,  729,  728,  727,  726,  725,  724,  723,  722,
      721,  720,  719,  718,  717,  716,  715,  714,  711,  710,
      709,  708,  707,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  687,  686,
      685,  684,  683,  682,  679,  678,  674,  673,  672,  671,

      670,  669,  668,  667,  666,  665,  664,  663,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  653,  650,  649,
      648,  647,  646,  645,  644,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  591,  590,  589,  588,  587,  586,  585,
      584,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,

      562,  561,  560,  559,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  531,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  455,

      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  404,  403,  402,  401,  400,  399,
      398,  393,  392,  391,  390,  389,  388,  387,  386,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  332,  331,  328,  327,  326,  325,

      324,  323,  322,  321,  320,  319,  318,  317,  316,  313,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  296,  295,  294,  293,  292,  291,  285,  284,  283,
      282,  281,  280,  275,  274,  271,  270,  269,  265,  264,
      263,  262,  261,  260,  259,  251,  250,  249,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  232,  231,
      224,  223,  222,  221,  220,  217,  216,  215,  214,  213,
      212,  211,  210,  205,  201,  200,  199,  196,  190,  189,
      188,  181,  180,  179,  176,  173,  172,  171,  170,  169,
      168,  167,  166,  158,  157,  156,  155,  129,  107,   63,

       62,   61,   48,   47,   46, 1073,    3, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073
    } ;

static yyconst flex_int16_t yy_chk[1281] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   12,   14,   13,   14,   14,   14,   14,
       14,  102,  102,   15,  699,   12,   13,   15,   16,   23,
       16,   16,   16,   16,   16,  700,   15,   22,   22,   22,

       23,   22,   74,   24,   16,  701,   22,   24,   74,   23,
       24,   24,   22,   22,   22,  184,   24,   24,   28,   24,
       25,   26,   24,   26,   25,   35,   27,   26,  184,   16,
       26,   30,   25,   26,   27,   28,   27,   27,   29,   27,
       36,   76,   28,   29,   36,   27,   33,   34,   30,   76,
       33,  132,  132,   29,   33,   30,   37,   34,   35,   33,
       37,   34,   35,   37,   37,  109,   37,   39,  702,   37,
       34,   39,   37,  109,   41,   41,   42,   35,   42,   65,
       39,   42,   85,   65,   84,   84,   39,   40,   85,   84,
       41,   54,   54,   54,   54,   54,   87,  703,   58,   58,

       58,   58,   58,   87,   91,   54,  126,   41,  144,  144,
       91,   41,   58,   59,   91,   59,   59,   59,   59,   59,
       41,  110,   40,   41,   40,  126,  110,   40,   40,   59,
       54,   40,  704,  182,   40,   40,  111,   58,   40,   40,
       60,   60,  182,   40,   60,   60,   60,   60,   60,   80,
      705,  111,   80,   80,   59,   80,   80,   93,  114,   80,
      127,  382,  127,   93,  114,   93,  131,  140,  149,  131,
      140,  150,  706,  149,  131,   93,  140,  162,  162,  162,
      162,  162,  131,  707,  131,  382,  150,  159,  159,  202,
      202,  159,  159,  159,  159,  159,  160,  160,  160,  160,

      160,  161,  161,  170,  708,  161,  161,  161,  161,  161,
      160,  163,  163,  163,  163,  163,  215,  252,  199,  170,
      170,  199,  709,  252,  315,  215,  262,  315,  270,  405,
      215,  270,  402,  215,  710,  160,  405,  262,  402,  262,
      405,  270,  262,  270,  364,  364,  285,  464,  464,  285,
      477,  537,  546,  477,  285,  537,  712,  546,  285,  270,
      285,  285,  713,  714,  285,  286,  286,  286,  286,  286,
      287,  287,  287,  287,  287,  288,  288,  715,  716,  288,
      288,  288,  288,  288,  289,  289,  289,  289,  289,  290,
      290,  290,  290,  290,  431,  431,  431,  431,  431,  432,

      432,  432,  432,  432,  577,  582,  592,  613,  621,  582,
      651,  718,  719,  711,  592,  577,  711,  720,  721,  722,
      577,  723,  725,  727,  613,  728,  711,  651,  729,  730,
      621,  711,  621,  732,  651,  733,  734,  735,  711,  736,
      737,  711,  738,  739,  740,  741,  742,  743,  744,  745,
      711,  746,  747,  748,  749,  711,  750,  752,  753,  754,
      755,  756,  757,  758,  759,  762,  763,  764,  766,  767,
      768,  769,  770,  772,  774,  775,  777,  780,  781,  783,
      784,  785,  788,  789,  790,  791,  792,  793,  794,  795,
      796,  797,  798,  799,  800,  801,  802,  804,  805,  806,

      807,  808,  810,  811,  812,  813,  814,  815,  816,  817,
      818,  819,  821,  822,  823,  824,  826,  827,  828,  829,
      830,  831,  832,  833,  834,  835,  837,  838,  839,  840,
      841,  843,  844,  845,  847,  848,  849,  850,  852,  853,
      854,  855,  856,  857,  858,  861,  862,  863,  864,  866,
      870,  871,  872,  875,  876,  877,  878,  880,  882,  883,
      884,  886,  889,  890,  891,  892,  856,  893,  894,  895,
      896,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      907,  908,  910,  911,  913,  914,  915,  917,  918,  920,
      921,  923,  924,  925,  926,  927,  928,  929,  930,  932,

      935,  936,  937,  938,  939,  941,  942,  911,  943,  944,
      945,  946,  947,  949,  950,  951,  953,  954,  926,  956,
      957,  958,  959,  961,  962,  964,  966,  968,  969,  970,
      971,  972,  975,  976,  977,  978,  979,  980,  981,  982,
      985,  986,  987,  989,  992,  993,  994,  995,  996,  997,
      998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008,
     1009, 1010, 1011, 1012, 1014,  986, 1015, 1017, 1018, 1020,
     1021, 1022, 1023, 1025, 1026, 1027, 1028, 1032, 1033, 1034,
     1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048,
     1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059,

     1060, 1062, 1067, 1068, 1069, 1070, 1074,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  683,  682,  681,  678,  677,  676,  675,  674,  673,
      672,  671,  670,  667,  666,  665,  664,  663,  662,  659,
      658,  657,  654,  653,  652,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  638,  636,  633,  632,
      631,  630,  629,  628,  626,  624,  623,  622,  620,  618,
      616,  615,  614,  612,  611,  609,  607,  606,  605,  604,
      601,  600,  599,  598,  597,  596,  595,  593,  591,  590,
      589,  588,  586,  583,  581,  578,  576,  575,  574,  573,

      572,  571,  570,  569,  568,  567,  565,  564,  563,  561,
      560,  557,  555,  554,  552,  550,  548,  547,  545,  543,
      542,  541,  540,  539,  538,  536,  535,  534,  533,  532,
      531,  529,  528,  527,  526,  525,  524,  523,  522,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  508,
      506,  505,  504,  502,  500,  499,  498,  497,  496,  494,
      493,  492,  490,  489,  488,  486,  485,  483,  482,  481,
      480,  479,  478,  476,  474,  473,  471,  470,  469,  466,
      465,  463,  462,  461,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,

      444,  442,  440,  439,  438,  437,  436,  435,  434,  429,
      428,  426,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  412,  411,  410,  409,  408,  407,  406,  403,  401,
      400,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  363,  362,  359,  358,  357,  356,  355,  354,
      353,  352,  349,  348,  347,  346,  345,  344,  343,  341,
      340,  338,  337,  335,  333,  332,  331,  330,  329,  328,
      327,  325,  324,  323,  322,  321,  320,  319,  317,  316,

      314,  313,  312,  311,  310,  309,  307,  305,  304,  303,
      302,  301,  299,  298,  297,  296,  295,  294,  292,  291,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  269,  268,  267,  266,  265,  264,
      263,  261,  259,  258,  257,  256,  255,  254,  253,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,
      240,  239,  238,  237,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  214,  213,  211,  210,  209,  208,
      207,  206,  205,  204,  201,  200,  198,  197,  196,  195,

      194,  193,  192,  191,  190,  189,  187,  186,  185,  183,
      181,  180,  179,  178,  177,  176,  175,  174,  173,  172,
      171,  169,  168,  167,  166,  165,  164,  156,  155,  154,
      153,  152,  151,  148,  147,  143,  142,  141,  139,  138,
      137,  136,  135,  134,  133,  130,  129,  128,  124,  123,
      122,  121,  120,  119,  118,  117,  116,  115,  113,  112,
      108,  107,  106,  104,  103,  101,  100,   99,   98,   97,
       96,   95,   94,   92,   90,   89,   88,   86,   83,   82,
       81,   79,   78,   77,   75,   73,   72,   71,   70,   69,
       68,   67,   66,   53,   45,   44,   43,   38,   32,   21,

       20,   19,   11,    9,    7,    3, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int gmsh_yy_flex_debug;
int gmsh_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *gmsh_yytext;
#line 1 "Gmsh.l"
#line 2 "Gmsh.l"
// Gmsh - Copyright (C) 1997-2016 C. Geuzaine, J.-F. Remacle
//
// See the LICENSE.txt file for license information. Please report all
// bugs and problems to the public mailing list <gmsh@onelab.info>.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "GmshConfig.h"
#include "GmshMessage.h"
#include "Geo.h"
#include "Gmsh.tab.hpp"
#include "GmshIO.h"

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#if defined(HAVE_COMPRESSED_IO) && defined(HAVE_ZLIB)
#define YY_INPUT(buf,result,max_size)                                   \
     {                                                                  \
       int c = '*', n;                                                  \
       for ( n = 0; n < (int) max_size &&                               \
               (c = gzgetc( gmsh_yyin )) != EOF && c != '\n'; ++n )          \
         buf[n] = (char) c;                                             \
       if ( c == '\n' ){                                                \
         buf[n++] = (char) c;                                           \
         gmsh_yylineno++;                                                    \
       }                                                                \
       if ( c == EOF )  {                                               \
         int ernum;                                                     \
         const char *msg=gzerror(gmsh_yyin,&ernum);                          \
         if (ernum)                                                     \
            Msg::Fatal("Input in flex scanner failed");                 \
       }                                                                \
       result = n;                                                      \
     }
#else
#define YY_INPUT(buf,result,max_size)					\
     {									\
       int c = '*', n;							\
       for ( n = 0; n < (int) max_size &&                               \
	       (c = fgetc( gmsh_yyin )) != EOF && c != '\n'; ++n )		\
	 buf[n] = (char) c;                                             \
       if ( c == '\n' ){                                                \
	 buf[n++] = (char) c;                                           \
	 gmsh_yylineno++;							\
       }                                                                \
       if ( c == EOF && ferror( gmsh_yyin ) )				\
	 Msg::Fatal("Input in flex scanner failed");			\
       result = n;							\
     }
#endif

#if defined(WIN32)
#define isatty(arg) -1
#define YY_NO_UNISTD_H
#endif

#line 1168 "Gmsh.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int gmsh_yylex_destroy (void );

int gmsh_yyget_debug (void );

void gmsh_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE gmsh_yyget_extra (void );

void gmsh_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *gmsh_yyget_in (void );

void gmsh_yyset_in  (FILE * in_str  );

FILE *gmsh_yyget_out (void );

void gmsh_yyset_out  (FILE * out_str  );

yy_size_t gmsh_yyget_leng (void );

char *gmsh_yyget_text (void );

int gmsh_yyget_lineno (void );

void gmsh_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int gmsh_yywrap (void );
#else
extern int gmsh_yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( gmsh_yytext, gmsh_yyleng, 1, gmsh_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( gmsh_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( gmsh_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, gmsh_yyin))==0 && ferror(gmsh_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(gmsh_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int gmsh_yylex (void);

#define YY_DECL int gmsh_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after gmsh_yytext and gmsh_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 72 "Gmsh.l"


#line 1353 "Gmsh.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! gmsh_yyin )
			gmsh_yyin = stdin;

		if ( ! gmsh_yyout )
			gmsh_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			gmsh_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE );
		}

		gmsh_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of gmsh_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1074 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1207 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 74 "Gmsh.l"
/* none */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 75 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 76 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 77 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "Gmsh.l"
{ parsestring('\"'); return tBIGSTR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 79 "Gmsh.l"
{ parsestring('\''); return tBIGSTR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "Gmsh.l"
{ gmsh_yylval.d = NEWREG(); return tDOUBLE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "Gmsh.l"
{ gmsh_yylval.d = NEWPOINT(); return tDOUBLE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 82 "Gmsh.l"
{ gmsh_yylval.d = NEWLINE(); return tDOUBLE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 83 "Gmsh.l"
{ gmsh_yylval.d = NEWLINE(); return tDOUBLE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 84 "Gmsh.l"
{ gmsh_yylval.d = NEWLINELOOP(); return tDOUBLE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 85 "Gmsh.l"
{ gmsh_yylval.d = NEWSURFACE(); return tDOUBLE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 86 "Gmsh.l"
{ gmsh_yylval.d = NEWSURFACELOOP(); return tDOUBLE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 87 "Gmsh.l"
{ gmsh_yylval.d = NEWVOLUME(); return tDOUBLE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 88 "Gmsh.l"
{ gmsh_yylval.d = NEWFIELD(); return tDOUBLE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 89 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 90 "Gmsh.l"
return tAFFECTPLUS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 91 "Gmsh.l"
return tAFFECTMINUS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 92 "Gmsh.l"
return tAFFECTTIMES;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 93 "Gmsh.l"
return tAFFECTDIVIDE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 94 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 95 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 96 "Gmsh.l"
return tOR;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tAND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 98 "Gmsh.l"
return tPLUSPLUS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 99 "Gmsh.l"
return tMINUSMINUS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tEQUAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tNOTEQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 102 "Gmsh.l"
return tLESSOREQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 103 "Gmsh.l"
return tGREATEROREQUAL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tAbort;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tAbsolutePath;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tAcos;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "Gmsh.l"
return tAdaptMesh;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "Gmsh.l"
return tAffine;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "Gmsh.l"
return tAcos;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "Gmsh.l"
return tAlias;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "Gmsh.l"
return tAliasWithOptions;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "Gmsh.l"
return tAsin;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "Gmsh.l"
return tAsin;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tAtan;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "Gmsh.l"
return tAtan;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "Gmsh.l"
return tBetti;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "Gmsh.l"
return tBezier;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tBoundingBox;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 125 "Gmsh.l"
return tCeil;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 126 "Gmsh.l"
return tCircle;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 127 "Gmsh.l"
return tCopyOptions;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 128 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 129 "Gmsh.l"
return tCohomology;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 130 "Gmsh.l"
return tCombine;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tCosh;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 132 "Gmsh.l"
return tCos;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 134 "Gmsh.l"
return tComplex;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 135 "Gmsh.l"
return tColor;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tColorTable;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tCompound;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 138 "Gmsh.l"
return tCoordinates;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tSpline;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 140 "Gmsh.l"
return tCall;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 141 "Gmsh.l"
return tCreateTopology;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 142 "Gmsh.l"
return tCreateTopologyNoHoles;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 143 "Gmsh.l"
return tCpu;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tCurrentDirectory;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 145 "Gmsh.l"
return tCurrentDirectory;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 147 "Gmsh.l"
return tDefineConstant;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 148 "Gmsh.l"
return tDefineNumber;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tDefineString;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 150 "Gmsh.l"
return tDelete;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tDegenerated;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 152 "Gmsh.l"
return tDilate;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tDirName;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 154 "Gmsh.l"
return tDraw;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 155 "Gmsh.l"
return tSetChanged;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 157 "Gmsh.l"
return tExp;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 159 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 160 "Gmsh.l"
return tElse;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tElseIf;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 162 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 164 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 165 "Gmsh.l"
return tEndIf;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 166 "Gmsh.l"
return tEuclidian;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tError;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 168 "Gmsh.l"
return tExit;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 169 "Gmsh.l"
return tExists;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 171 "Gmsh.l"
return tFabs;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tField;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 173 "Gmsh.l"
return tFind;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 174 "Gmsh.l"
return tFileExists;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 175 "Gmsh.l"
return tFixRelativePath;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tFloor;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 177 "Gmsh.l"
return tFmod;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 178 "Gmsh.l"
return tFor;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 179 "Gmsh.l"
return tMacro;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 181 "Gmsh.l"
return tGetEnv;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 182 "Gmsh.l"
return tGetString;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 183 "Gmsh.l"
return tGetNumber;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 184 "Gmsh.l"
return tGetValue;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tGetStringValue;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 186 "Gmsh.l"
return tGMSH_MAJOR_VERSION;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tGMSH_MINOR_VERSION;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 188 "Gmsh.l"
return tGMSH_PATCH_VERSION;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tGmshExecutableName;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tHide;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 192 "Gmsh.l"
return tHole;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 193 "Gmsh.l"
return tHomology;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 194 "Gmsh.l"
return tHypot;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 196 "Gmsh.l"
return tIn;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tIf;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 198 "Gmsh.l"
return tIntersect;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tInterpolationScheme;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 201 "Gmsh.l"
return tNurbsKnots;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tLength;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 204 "Gmsh.l"
return tLine;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 205 "Gmsh.l"
return tList;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 206 "Gmsh.l"
return tLog;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 207 "Gmsh.l"
return tLog10;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tLayers;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tLevelset;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tMacro;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tMeshAlgorithm;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 213 "Gmsh.l"
return tModulo;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tMPI_Rank;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 215 "Gmsh.l"
return tMPI_Size;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tMemory;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 218 "Gmsh.l"
return tNameToString;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 219 "Gmsh.l"
return tNameToString;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 220 "Gmsh.l"
return tNewModel;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 221 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 223 "Gmsh.l"
return tOnelabAction;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 224 "Gmsh.l"
return tOnelabRun;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 225 "Gmsh.l"
return tNurbsOrder;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 227 "Gmsh.l"
return tPeriodic;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 228 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 229 "Gmsh.l"
return tPi;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 230 "Gmsh.l"
return tPlane;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 231 "Gmsh.l"
return tPoint;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 232 "Gmsh.l"
return tParametric;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 233 "Gmsh.l"
return tPolarSphere;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 234 "Gmsh.l"
return tPrintf;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 235 "Gmsh.l"
return tPlugin;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 237 "Gmsh.l"
return tQuadTriAddVerts;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 238 "Gmsh.l"
return tQuadTriNoNewVerts;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 240 "Gmsh.l"
return tQuadTriDbl;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 241 "Gmsh.l"
return tQuadTriSngl;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 243 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 244 "Gmsh.l"
return tRecombLaterals;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 245 "Gmsh.l"
return tRecursive;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 246 "Gmsh.l"
return tRotate;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 247 "Gmsh.l"
return tRound;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 248 "Gmsh.l"
return tRuled;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 249 "Gmsh.l"
return tRand;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 250 "Gmsh.l"
return tRefineMesh;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 251 "Gmsh.l"
return tRelocateMesh;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 252 "Gmsh.l"
return tReturn;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 253 "Gmsh.l"
return tReverse;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 255 "Gmsh.l"
return tScaleLast;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 256 "Gmsh.l"
return tSmoother;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 257 "Gmsh.l"
return tSetNumber;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 258 "Gmsh.l"
return tSetString;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 259 "Gmsh.l"
return tSetPartition;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 260 "Gmsh.l"
return tSqrt;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 261 "Gmsh.l"
return tSin;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 262 "Gmsh.l"
return tSinh;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 263 "Gmsh.l"
return tSphere;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 264 "Gmsh.l"
return tSpline;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 265 "Gmsh.l"
return tSplit;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 266 "Gmsh.l"
return tSurface;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 267 "Gmsh.l"
return tStr;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 268 "Gmsh.l"
return tStringToName;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 269 "Gmsh.l"
return tStringToName;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 270 "Gmsh.l"
return tSprintf;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 271 "Gmsh.l"
return tStrCat;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 272 "Gmsh.l"
return tStrReplace;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 273 "Gmsh.l"
return tStrPrefix;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 274 "Gmsh.l"
return tStrRelative;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 275 "Gmsh.l"
return tStrFind;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 276 "Gmsh.l"
return tStrCmp;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 277 "Gmsh.l"
return tStrChoice;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 278 "Gmsh.l"
return tShow;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 279 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 280 "Gmsh.l"
return tSyncModel;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 282 "Gmsh.l"
return tText2D;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 283 "Gmsh.l"
return tText3D;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 284 "Gmsh.l"
return tTestLevel;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 285 "Gmsh.l"
return tTextAttributes;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 286 "Gmsh.l"
return tTime;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 287 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 288 "Gmsh.l"
return tTransfQuadTri;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 289 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 290 "Gmsh.l"
return tTanh;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 291 "Gmsh.l"
return tTan;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 292 "Gmsh.l"
return tToday;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 293 "Gmsh.l"
return tTotalMemory;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 295 "Gmsh.l"
return tUndefineConstant;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 296 "Gmsh.l"
return tUpperCase;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 297 "Gmsh.l"
return tLowerCase;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 298 "Gmsh.l"
return tLowerCaseIn;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 299 "Gmsh.l"
return tUsing;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 301 "Gmsh.l"
return tVolume;
	YY_BREAK
case 207:
#line 304 "Gmsh.l"
case 208:
#line 305 "Gmsh.l"
case 209:
#line 306 "Gmsh.l"
case 210:
YY_RULE_SETUP
#line 306 "Gmsh.l"
{ gmsh_yylval.d = atof((char *)gmsh_yytext); return tDOUBLE; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 308 "Gmsh.l"
{ gmsh_yylval.c = strsave((char*)gmsh_yytext); return tSTRING; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 310 "Gmsh.l"
return gmsh_yytext[0];
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 312 "Gmsh.l"
ECHO;
	YY_BREAK
#line 2493 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed gmsh_yyin at a new source and called
			 * gmsh_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = gmsh_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( gmsh_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * gmsh_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of gmsh_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gmsh_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			gmsh_yyrestart(gmsh_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) gmsh_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1074 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1074 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1073);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up gmsh_yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					gmsh_yyrestart(gmsh_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( gmsh_yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve gmsh_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void gmsh_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        gmsh_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE );
	}

	gmsh_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	gmsh_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void gmsh_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		gmsh_yypop_buffer_state();
	 *		gmsh_yypush_buffer_state(new_buffer);
     */
	gmsh_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	gmsh_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (gmsh_yywrap()) processing, but the only time this flag
	 * is looked at is after gmsh_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void gmsh_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	gmsh_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE gmsh_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) gmsh_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gmsh_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	gmsh_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with gmsh_yy_create_buffer()
 * 
 */
    void gmsh_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		gmsh_yyfree((void *) b->yy_ch_buf  );

	gmsh_yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a gmsh_yyrestart() or at EOF.
 */
    static void gmsh_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	gmsh_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then gmsh_yy_init_buffer was _probably_
     * called from gmsh_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void gmsh_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		gmsh_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void gmsh_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	gmsh_yyensure_buffer_stack();

	/* This block is copied from gmsh_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from gmsh_yy_switch_to_buffer. */
	gmsh_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void gmsh_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	gmsh_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		gmsh_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void gmsh_yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)gmsh_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gmsh_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)gmsh_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gmsh_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE gmsh_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) gmsh_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	gmsh_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to gmsh_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       gmsh_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE gmsh_yy_scan_string (yyconst char * yystr )
{
    
	return gmsh_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to gmsh_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE gmsh_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) gmsh_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = gmsh_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in gmsh_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gmsh_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		gmsh_yytext[gmsh_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = gmsh_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		gmsh_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int gmsh_yyget_lineno  (void)
{
        
    return gmsh_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *gmsh_yyget_in  (void)
{
        return gmsh_yyin;
}

/** Get the output stream.
 * 
 */
FILE *gmsh_yyget_out  (void)
{
        return gmsh_yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t gmsh_yyget_leng  (void)
{
        return gmsh_yyleng;
}

/** Get the current token.
 * 
 */

char *gmsh_yyget_text  (void)
{
        return gmsh_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void gmsh_yyset_lineno (int  line_number )
{
    
    gmsh_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see gmsh_yy_switch_to_buffer
 */
void gmsh_yyset_in (FILE *  in_str )
{
        gmsh_yyin = in_str ;
}

void gmsh_yyset_out (FILE *  out_str )
{
        gmsh_yyout = out_str ;
}

int gmsh_yyget_debug  (void)
{
        return gmsh_yy_flex_debug;
}

void gmsh_yyset_debug (int  bdebug )
{
        gmsh_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from gmsh_yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    gmsh_yyin = stdin;
    gmsh_yyout = stdout;
#else
    gmsh_yyin = (FILE *) 0;
    gmsh_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * gmsh_yylex_init()
     */
    return 0;
}

/* gmsh_yylex_destroy is for both reentrant and non-reentrant scanners. */
int gmsh_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		gmsh_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		gmsh_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	gmsh_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * gmsh_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gmsh_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *gmsh_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gmsh_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see gmsh_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 312 "Gmsh.l"



#undef gmsh_yywrap

int gmsh_yywrap() {return 1;}

void skipcomments(void)
{
  int c;

  while (1) {
    while ((c = yyinput()) != '*'){
      // Test on YY_END_OF_BUFFER_CHAR (0), not on gmsheof(gmsh_yyin) because whole line in buffer
      if(c=='\0'){
	Msg::Error("End of file in commented region");
        return;
      }
    }
    if ((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar)
{
  int c;
  char tmp[1024];

  // Note that we keep special characters (end-of-line \n, tabs \t,
  // etc.) "as is" in the output string: see yyinput() above
  int i = 0;
  while ((c = yyinput()) != endchar) {
    // Test on YY_END_OF_BUFFER_CHAR (0), not on gmsheof(gmsh_yyin) because whole line in buffer
    if(c=='\0'){
      Msg::Error("End of file in string");
      break;
    }
    else if(i >= (int)sizeof(tmp)-1){
      Msg::Error("String too long");
      break;
    }
    else{
      tmp[i++] = (char)c;
    }
  }
  tmp[i] = '\0';
  gmsh_yylval.c = strsave(tmp);
}

char *strsave(char *ptr)
{
  return((char*)strcpy((char*)malloc(strlen(ptr)+1),ptr));
}

void skipline()
{
  int c;
  while ((c = yyinput()) != '\n' && c!='\0') {}
  // TODO: would be clever to skip the current buffer because whole line already in it
}

static bool is_alpha(const int c)
{
  return (c>='a' && c<='z') || (c>='A' && c<='Z') || c=='_';
}

void skip_until(const char *skip, const char *until)
{
  int i, nb_skip = 0;
  int l_skip, l_until, l_max, l;
  char chars[256];
  int c_next, c_next_skip, c_next_until, c_previous = 0;

  l_skip = (skip)? strlen(skip) : 0;
  l_until = strlen(until);

  l_max = std::max(l_skip,l_until);
  if(l_max >= (int)sizeof(chars)){
    Msg::Error("Search pattern too long in skip_until");
    return;
  }

  while(1){
    while (1){
      chars[0] = yyinput();
      // TOFIX: do another test
      if(gmsheof(gmsh_yyin)){
	Msg::Error("Unexpected end of file");
	return;
      }
      if(chars[0] == '/'){
        c_next = yyinput();
        if     (c_next ==  '*') skipcomments();
        else if(c_next ==  '/') skipline();
        else unput(c_next);
      }
      if(!c_previous || !is_alpha(c_previous)){
        if(chars[0] == until[0]) break;
        if(skip && chars[0] == skip[0]) break;
      }
      c_previous = chars[0];
    }

    l = l_max;

    for(i=1; i<l; i++){
      chars[i] = yyinput();
      if(gmsheof(gmsh_yyin)){
	l = i;
	break;
      }
    }

    c_next = yyinput(); unput(c_next);
    c_next_skip = (l_skip<l)? chars[l_skip] : c_next;
    c_next_until = (l_until<l)? chars[l_until] : c_next;

    if(!strncmp(chars,until,l_until) && !is_alpha(c_next_until)){
      if(!nb_skip){
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars,skip,l_skip) && !is_alpha(c_next_skip)){
      nb_skip++;
      // Attention: unput(.) should be applied a number of times equal to
      // l-l_skip (always >0 for skip="For" and until="EndFor", or skip="If" and
      // until="EndIf"); in particular, because "If" is followed by a minimum of
      // 3 chars (e.g., '(1)'), with a total lenght thus exactly equal to the
      // one of "EndIf", one avoid an error when looking then for
      // "EndIf". (Patrick)
    }
    else{
      for(i=1;i<l-1;i++){
	unput(chars[l-i]);
      }
    }

  }
}

void skip_until_test(const char *skip, const char *until,
                     const char *until2, int l_until2_sub, int *type_until2)
{
  int i, nb_skip = 0;
  int l_skip, l_until, l_until2, l_max, l;
  char chars[256];
  int c_next, c_next_skip, c_next_until, c_next_until2, c_previous = 0, flag_EOL_EOF = 0;

  l_skip = (skip)? strlen(skip) : 0;
  l_until = strlen(until);
  l_until2 = (until2)? strlen(until2) : 0;

  l_max = std::max(l_skip,l_until);
  l_max = std::max(l_max,l_until2);
  if(l_max >= (int)sizeof(chars)){
    Msg::Error("Search pattern too long in skip_until_test");
    return;
  }

  while(1){
    while (1){
      chars[0] = yyinput();
      if(gmsheof(gmsh_yyin)){
	Msg::Error("Unexpected end of file");
	return;
      }
      if(chars[0] == '/'){
        c_next = yyinput();
        if     (c_next ==  '*') skipcomments();
        else if(c_next ==  '/') skipline();
        else unput(c_next);
      }
      if(!c_previous || !is_alpha(c_previous)){
        if(chars[0] == until[0]) break;
        if(skip && chars[0] == skip[0]) break;
        if(!nb_skip && until2 && chars[0] == until2[0]) break;
        // Useless to search for until2 if nb_skip!=0
      }
      c_previous = chars[0];
    }

    l = l_max;
    flag_EOL_EOF = 0;

    for(i=1; i<l; i++){
      chars[i] = yyinput();
      if(chars[i] == '\n'){
        unput(chars[i]); chars[i] = 0; l = i; flag_EOL_EOF = 1;
        break;
      }
      if(gmsheof(gmsh_yyin)){
	l = i; flag_EOL_EOF = 1;
	break;
      }
    }

    if(!flag_EOL_EOF){
      c_next = yyinput(); unput(c_next);
      c_next_skip = (l_skip<l)? chars[l_skip] : c_next;
      c_next_until = (l_until<l)? chars[l_until] : c_next;
      if (!nb_skip)
        c_next_until2 = (l_until2<l)? chars[l_until2] : c_next;
    }
    else{
      c_next = 0; c_next_skip = 0; c_next_until = 0; c_next_until2 = 0;
    }

    if(!nb_skip && !strncmp(chars,until2,l_until2) && !is_alpha(c_next_until2)){
      *type_until2 = 1; // Found word is full until2 (e.g., "ElseIf")
      for(int i = 1; i <= l; i++){ // Only correct if l == l_until2
        unput(chars[l-i]);
      } // New file position points "ElseIf", that will be then analysed by the parser
      return;
    }
    else if(!nb_skip && !strncmp(chars,until2,l_until2_sub) && !is_alpha(chars[l_until2_sub])){
      *type_until2 = 2; // Found word is subword from until2 (e.g., "Else")
      for(int i = 1; i <= l-l_until2_sub; i++){ // Only correct if l_until2_sub < l
        unput(chars[l-i]);
      }
      return;
    }
    else if(!strncmp(chars,until,l_until) && !is_alpha(c_next_until)){
      for(int i = 1; i <= l-l_until; i++){
        unput(chars[l-i]);
      }
      if(!nb_skip){
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars,skip,l_skip) && !is_alpha(c_next_skip)){
      nb_skip++;
    }
    else{
      for(i=1;i<l-1;i++){
	unput(chars[l-i]);
      }
    }

  }
}

void gmsh_yyflush() { YY_FLUSH_BUFFER; }

